"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
import unittest

from utils.helpers.helper_dict import combine_dicts
from utils.math.factorisation import get_num_factors, get_prime_factors
from utils.math.seqs.seq_powers import get_triangle

def euler_012(limit):
	m = 1
	pfm, pfn = None, get_prime_factors(m + 1)
	while True:
		m += 1
		pfm, pfn = pfn, get_prime_factors(m + 1)
		pfmn = combine_dicts([pfm, pfn], sum, 0)
		pfmn[2] -= 1
		if get_num_factors(prime_factors=pfmn) > limit:
			return get_triangle(m)

class Test(unittest.TestCase):
	def test(self):
		self.assertEquals(euler_012(limit=5), 28)
		self.assertEquals(euler_012(limit=500), 76576500)
